# to avoid anoying "stty: 'standard input': Inappropriate ioctl for device" error
[[ $- == *i* ]] && stty -ixon

#export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/dist
# source ~/.nvm/nvm.sh
nvm use v8.9.1 > /dev/null


# npm path
export PATH=$PATH:/home/cert/npm/bin:/home/cert/bin:/home/cert/src/on-tools/node_modules/.bin

# xterm setting
export TERM="xterm-256color"

# ted misc
export sk="192.168.128"
export nd="172.31.128"
export bmc="192.168.188"
export lab="10.62.59"
alias ic=ifconfig
alias ge="env | grep"

#file by Felix & Ben

# Setup go
# export PATH=$PATH:/usr/local/go/bin
export GOWORKSPACE=/home/cert/go
alias cdgo="cd $GOWORKSPACE"
alias cdgo="cd $GOWORKSPACE"
alias cdzp="cd $GOWORKSPACE/src/gitlab.eng.vmware.com/zp"
# export PATH=$GOWORKSPACE/bin:$PATH
# setting up go version manager gvm
source /home/cert/.gvm/scripts/gvm
gvm use go1.11.2 > /dev/null
# gvm pkgenv system # to check env settings
gvm pkgset use system > /dev/null

# grep alias
alias ga="alias | grep"

# ag alias
# alias timeline="ag -G 'test-vpx\.vsan.*.log' \"Test version 5.2.009|Cleaning up done\""
alias timeline="python3 ~/tools/vsancert_review_utils/timeline_decoder.py"
alias getinfo="python3 ~/tools/vsancert_review_utils/getinfo.py"
alias objgraph="python3 /home/cert/tools/vsan_obj_decoder/vsan_obj_decoder.py"

# search alias
alias sk="ag -G 'vmkernel.*.log'"
alias sv="ag -G 'vobd.log'"
alias st="ag -G 'test-vpx\.vsan.*.log'"

function grepfio(){
    cat $1 | grep -E "Creating FIO config|Done running FIO"
}

# git alias
alias gl="git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit -n10"
alias glg="git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit"
alias gs="git status"
alias gm="git commit -m "
alias gd="git diff --color"
alias gr="git remote -v"

#onrack alias
alias ni="sudo node index.js"
alias nid="sudo node --debug index.js"
alias mt="mocha \$(find spec -name '*-spec.js') -R spec --require spec/helper.js"
alias jc="jshint -c .jshintrc lib index.js"
alias ms="sudo /opt/onrack/bin/monorail status"
alias mrs="sudo /opt/onrack/bin/monorail restart"
alias mp="sudo /opt/onrack/bin/monorail stop"

#pm2 alias
alias p="pm2"
alias pl="pm2 list"
alias pr="pm2 restart"
alias pst="pm2 start"
alias pp="pm2 stop"

#docker alias
alias d="sudo docker" 
alias dc="sudo docker-compose"

# Tmux hotkey
alias t="tmux"
alias tl="tmux ls"
alias ta="tmux a -t"
alias tn="tmux new -s"
alias tk="tmux kill-session -t"

# fzf alias
alias f="fzf"

#general alias
alias la="ls -alh"
alias c="clear"
alias l="ls"
alias less="less -R"
alias v="vim"
alias ~="cd ~"
# alias .="cd .."
alias ..="cd ../"
alias ...="cd ../.."
alias ....="cd ../../.."
alias mproc="ps -aux | grep index"
alias apti="sudo apt-get install"
alias apts="apt-cache search"
alias fd="sudo find -name"
# search javascript files, without node_module files, html files, compressed .min files
alias agj="ag --ignore='*-min.*' --ignore='*.min.*' --ignore='*/html/*' --ignore-dir='*/node_modules*' --ignore-dir='*/web-ui/*' -G .js$"
# search test files
alias agp="agj -G /spec/"
function gp() {
    echo grep -rn \"$1\" ./
    sudo grep --color=auto -rn $1 ./
}

function duh() {
       du -h --max-depth=$1
}

#open file alias
alias vnet="sudo vim /etc/network/interfaces"
alias vsmb="sudo vim /etc/samba/smb.conf"
alias vdhcp="sudo vim /var/lib/dhcp/dhcpd.leases"
alias vbash="vim ~/.bash-alias"
alias sbash="source ~/.bashrc"
alias cbash="cat ~/.bash-alias"
alias vvim="vim ~/.vimrc"
alias vv="vim ~/.vimrc"

#change directory alias
alias cd-="cd -"
alias cd.="cd .."
alias cd..="cd .."
onracksrc="~/github"
alias cdon="cd ${onracksrc}"
alias cdcore="cd ${onracksrc}/on-core"
alias cdtask="cd ${onracksrc}/on-tasks"
alias cdjob="cd ${onracksrc}/on-tasks/lib/jobs"
# cd to task definition
alias cdtd="cd ${onracksrc}/on-tasks/lib/task-data/tasks"
# cd to base task definition
alias cdgithub="cd ${onracksrc}"
alias cdtb="cd ${onracksrc}/on-tasks/lib/task-data/base-tasks"


# graph runner
alias cdgraphruner="cd /workspace/testing/tedc/graphrunner"

#find port
function fp() {
    sudo netstat -apn | grep $1
}

function ipmi() {
    ipmitool -I lanplus -U $1 -P $2 -H $3 $4 $5 $6 $7 $8 $9
}

#ipmicommand for vbmc
function vipmi() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 $2 $3 $4 $5 $6 $7 $8 $9
}

function vchassis() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 chassis $2 $3 $4 $5 $6
}

function vpxe() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 chassis bootdev pxe
}

function von() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 chassis power on
}

function voff() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 chassis power off
}

function vrestart() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 chassis power cycle
}

function vcycle() {
    ipmitool -I lanplus -U admin -P admin -H 172.31.128.$1 chassis power cycle
}

function m() {
    if [ $# -ge 2 ]
    then
      if [ $1 == post ]
      then
        http POST http://localhost:8080/api/common/$2 $3 $4 $5 $6 $7 $8 | prettyjson
      else
        http $1 http://localhost:8080/api/common/$2 $3 $4 $5 $6 $7 $8 | prettyjson

      fi
    else
        http -b http://localhost:8080/api/common/$1 $2 $3 $4 $5 $6 | prettyjson
    fi
}

function mpost() {
    http POST http://localhost:8080/api/common/$1 < $2 $3 $4 $5 $6 $7 $8 | prettyjson
}

function mput() {
    http PUT http://localhost:8080/api/common/$1 < $2 $3 $4 $5 $6 $7 $8 | prettyjson
}

function mdel() {
    http DELETE http://localhost:8080/api/common/$1 $2 $3 $4 $5 $6 $7 $8 | prettyjson
}

function o() {
    echo http GET https://localhost/rest/v1/$1 Authentication-Token:$2 $3 $4 $5 $6 $7 $8 $9 -b --verify=no
    http GET https://localhost/rest/v1/$1 Authentication-Token:$2 $3 $4 $5 $6 $7 $8 $9 -b --verify=no | prettyjson
}

function opost() {
    echo http POST https://localhost/rest/v1/$1 Authentication-Token:$2 $3 $4 $5 $6 $7 $8 $9 -b --verify=no
    http POST https://localhost/rest/v1/$1 Authentication-Token:$2 $3 $4 $5 $6 $7 $8 $9 --verify=no | prettyjson
}

function oauth() {
    http POST https://localhost/login email=admin password=admin123 $1 $2 $3 $4 $5 $6 --verify=no | prettyjson
}

function vtun() {
    echo create tunnel for 172.31.128.$1 on port 5901
    socat -d -d TCP4-LISTEN:5901,reuseaddr,fork TCP4:172.31.128.$1:5901
}

function tun() {
    echo craete tunnel from port $1 to port $2
    sudo socat -d -d TCP4-LISTEN:$2,reuseaddr,fork TCP4:127.0.0.1:$1
}
